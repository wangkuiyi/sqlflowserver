// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sqlflow.proto

package sqlflow

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// SQL statements to be executed
// e.g.
//      1. `USE database`
//      2. `SELECT ...`
//      3. `SELECT ... TRAIN/PREDICT ...`
type RunRequest struct {
	Sql                  string   `protobuf:"bytes,1,opt,name=sql,proto3" json:"sql,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunRequest) Reset()         { *m = RunRequest{} }
func (m *RunRequest) String() string { return proto.CompactTextString(m) }
func (*RunRequest) ProtoMessage()    {}
func (*RunRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e9f9b081a5698ac, []int{0}
}

func (m *RunRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunRequest.Unmarshal(m, b)
}
func (m *RunRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunRequest.Marshal(b, m, deterministic)
}
func (m *RunRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunRequest.Merge(m, src)
}
func (m *RunRequest) XXX_Size() int {
	return xxx_messageInfo_RunRequest.Size(m)
}
func (m *RunRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RunRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RunRequest proto.InternalMessageInfo

func (m *RunRequest) GetSql() string {
	if m != nil {
		return m.Sql
	}
	return ""
}

// SQL statements like `USE database` returns only a success message.
// In such cases, the return stream contains only one RunResponse with
// RunResponse.messages set.
//
// SQL statements like `SELECT ...` returns a table in addition
// to the status, and the table might be big. In such cases, Run returns a
// stream of RunResponse
//
// SQL statement like `SELECT ... TRAIN/PREDICT ...` returns a stream of messages
// which indicates the training/predicting progress
//
// Each RunResponse doesn't exceed the maximum message size
// (https://stackoverflow.com/a/34186672/724872).
type RunResponse struct {
	// Types that are valid to be assigned to Response:
	//	*RunResponse_Messages
	//	*RunResponse_Columns
	Response             isRunResponse_Response `protobuf_oneof:"response"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *RunResponse) Reset()         { *m = RunResponse{} }
func (m *RunResponse) String() string { return proto.CompactTextString(m) }
func (*RunResponse) ProtoMessage()    {}
func (*RunResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e9f9b081a5698ac, []int{1}
}

func (m *RunResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunResponse.Unmarshal(m, b)
}
func (m *RunResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunResponse.Marshal(b, m, deterministic)
}
func (m *RunResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunResponse.Merge(m, src)
}
func (m *RunResponse) XXX_Size() int {
	return xxx_messageInfo_RunResponse.Size(m)
}
func (m *RunResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RunResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RunResponse proto.InternalMessageInfo

type isRunResponse_Response interface {
	isRunResponse_Response()
}

type RunResponse_Messages struct {
	Messages *Messages `protobuf:"bytes,1,opt,name=messages,proto3,oneof"`
}

type RunResponse_Columns struct {
	Columns *Columns `protobuf:"bytes,2,opt,name=columns,proto3,oneof"`
}

func (*RunResponse_Messages) isRunResponse_Response() {}

func (*RunResponse_Columns) isRunResponse_Response() {}

func (m *RunResponse) GetResponse() isRunResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *RunResponse) GetMessages() *Messages {
	if x, ok := m.GetResponse().(*RunResponse_Messages); ok {
		return x.Messages
	}
	return nil
}

func (m *RunResponse) GetColumns() *Columns {
	if x, ok := m.GetResponse().(*RunResponse_Columns); ok {
		return x.Columns
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RunResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RunResponse_Messages)(nil),
		(*RunResponse_Columns)(nil),
	}
}

type Messages struct {
	Messages             []string `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Messages) Reset()         { *m = Messages{} }
func (m *Messages) String() string { return proto.CompactTextString(m) }
func (*Messages) ProtoMessage()    {}
func (*Messages) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e9f9b081a5698ac, []int{2}
}

func (m *Messages) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Messages.Unmarshal(m, b)
}
func (m *Messages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Messages.Marshal(b, m, deterministic)
}
func (m *Messages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Messages.Merge(m, src)
}
func (m *Messages) XXX_Size() int {
	return xxx_messageInfo_Messages.Size(m)
}
func (m *Messages) XXX_DiscardUnknown() {
	xxx_messageInfo_Messages.DiscardUnknown(m)
}

var xxx_messageInfo_Messages proto.InternalMessageInfo

func (m *Messages) GetMessages() []string {
	if m != nil {
		return m.Messages
	}
	return nil
}

type Columns struct {
	Columns              map[string]*Columns_Column `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *Columns) Reset()         { *m = Columns{} }
func (m *Columns) String() string { return proto.CompactTextString(m) }
func (*Columns) ProtoMessage()    {}
func (*Columns) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e9f9b081a5698ac, []int{3}
}

func (m *Columns) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Columns.Unmarshal(m, b)
}
func (m *Columns) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Columns.Marshal(b, m, deterministic)
}
func (m *Columns) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Columns.Merge(m, src)
}
func (m *Columns) XXX_Size() int {
	return xxx_messageInfo_Columns.Size(m)
}
func (m *Columns) XXX_DiscardUnknown() {
	xxx_messageInfo_Columns.DiscardUnknown(m)
}

var xxx_messageInfo_Columns proto.InternalMessageInfo

func (m *Columns) GetColumns() map[string]*Columns_Column {
	if m != nil {
		return m.Columns
	}
	return nil
}

// A data column of any type
type Columns_Column struct {
	Data                 []*any.Any `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Columns_Column) Reset()         { *m = Columns_Column{} }
func (m *Columns_Column) String() string { return proto.CompactTextString(m) }
func (*Columns_Column) ProtoMessage()    {}
func (*Columns_Column) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e9f9b081a5698ac, []int{3, 1}
}

func (m *Columns_Column) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Columns_Column.Unmarshal(m, b)
}
func (m *Columns_Column) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Columns_Column.Marshal(b, m, deterministic)
}
func (m *Columns_Column) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Columns_Column.Merge(m, src)
}
func (m *Columns_Column) XXX_Size() int {
	return xxx_messageInfo_Columns_Column.Size(m)
}
func (m *Columns_Column) XXX_DiscardUnknown() {
	xxx_messageInfo_Columns_Column.DiscardUnknown(m)
}

var xxx_messageInfo_Columns_Column proto.InternalMessageInfo

func (m *Columns_Column) GetData() []*any.Any {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*RunRequest)(nil), "sqlflow.RunRequest")
	proto.RegisterType((*RunResponse)(nil), "sqlflow.RunResponse")
	proto.RegisterType((*Messages)(nil), "sqlflow.Messages")
	proto.RegisterType((*Columns)(nil), "sqlflow.Columns")
	proto.RegisterMapType((map[string]*Columns_Column)(nil), "sqlflow.Columns.ColumnsEntry")
	proto.RegisterType((*Columns_Column)(nil), "sqlflow.Columns.Column")
}

func init() { proto.RegisterFile("sqlflow.proto", fileDescriptor_6e9f9b081a5698ac) }

var fileDescriptor_6e9f9b081a5698ac = []byte{
	// 309 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xcd, 0x4e, 0xeb, 0x30,
	0x10, 0x46, 0x9b, 0xf6, 0xde, 0xa6, 0x9d, 0x80, 0x54, 0x4c, 0x25, 0x4a, 0x24, 0x10, 0xca, 0x02,
	0x65, 0x01, 0x09, 0x0a, 0x0b, 0x10, 0x12, 0x0b, 0x40, 0xa0, 0x2e, 0x60, 0x81, 0xfb, 0x04, 0x29,
	0xb8, 0x59, 0xd4, 0xb5, 0x9b, 0x38, 0xa6, 0xe4, 0x19, 0x79, 0x29, 0x14, 0xff, 0x24, 0x14, 0x89,
	0x55, 0xe2, 0x99, 0xa3, 0xef, 0xd8, 0x33, 0xb0, 0x2b, 0x72, 0xba, 0xa0, 0x7c, 0x13, 0xad, 0x0b,
	0x5e, 0x72, 0xe4, 0x9a, 0xa3, 0x7f, 0x98, 0x71, 0x9e, 0x51, 0x12, 0xab, 0xf2, 0x5c, 0x2e, 0xe2,
	0x94, 0x55, 0x9a, 0x09, 0x8e, 0x01, 0xb0, 0x64, 0x98, 0xe4, 0x92, 0x88, 0x12, 0x8d, 0xa0, 0x27,
	0x72, 0x3a, 0x71, 0x4e, 0x9c, 0x70, 0x88, 0xeb, 0xdf, 0xe0, 0x13, 0x3c, 0xd5, 0x17, 0x6b, 0xce,
	0x04, 0x41, 0x31, 0x0c, 0x56, 0x44, 0x88, 0x34, 0x23, 0x42, 0x51, 0x5e, 0xb2, 0x17, 0x59, 0xe9,
	0x8b, 0x69, 0x4c, 0x3b, 0xb8, 0x81, 0xd0, 0x19, 0xb8, 0x6f, 0x9c, 0xca, 0x15, 0x13, 0x93, 0xae,
	0xe2, 0x47, 0x0d, 0xff, 0xa0, 0xeb, 0xd3, 0x0e, 0xb6, 0xc8, 0x3d, 0xc0, 0xa0, 0x30, 0xaa, 0xe0,
	0x14, 0x06, 0x36, 0x11, 0xf9, 0x5b, 0xda, 0x5e, 0x38, 0x6c, 0x0d, 0xc1, 0x97, 0x03, 0xae, 0x89,
	0x42, 0x57, 0xad, 0xad, 0xc6, 0xbc, 0xe4, 0xe8, 0xb7, 0xcd, 0x7e, 0x1f, 0x59, 0x59, 0x54, 0x8d,
	0xd8, 0x9f, 0xc1, 0xce, 0xcf, 0x46, 0x3d, 0x88, 0x25, 0xa9, 0xec, 0x20, 0x96, 0xa4, 0x42, 0xe7,
	0xf0, 0xff, 0x23, 0xa5, 0x92, 0x98, 0x67, 0x1c, 0xfc, 0x11, 0x8c, 0x35, 0x75, 0xd3, 0xbd, 0x76,
	0xfc, 0x04, 0xfa, 0xba, 0x88, 0x42, 0xf8, 0xf7, 0x9e, 0x96, 0xa9, 0xb9, 0xd4, 0x38, 0xd2, 0xfb,
	0x88, 0xec, 0x3e, 0xa2, 0x3b, 0x56, 0x61, 0x45, 0x24, 0xb7, 0xe0, 0xce, 0x5e, 0x9f, 0x9f, 0x28,
	0xdf, 0xa0, 0x04, 0x7a, 0x58, 0x32, 0xb4, 0xdf, 0x98, 0xda, 0x45, 0xf9, 0xe3, 0xed, 0xa2, 0x1e,
	0xd9, 0x85, 0x33, 0xef, 0xab, 0xc8, 0xcb, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9c, 0x37, 0x9e,
	0x12, 0x0a, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SQLFlowClient is the client API for SQLFlow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SQLFlowClient interface {
	// Run runs a SQL statement and returns a stream of RunResponse.
	Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (SQLFlow_RunClient, error)
}

type sQLFlowClient struct {
	cc *grpc.ClientConn
}

func NewSQLFlowClient(cc *grpc.ClientConn) SQLFlowClient {
	return &sQLFlowClient{cc}
}

func (c *sQLFlowClient) Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (SQLFlow_RunClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SQLFlow_serviceDesc.Streams[0], "/sqlflow.SQLFlow/Run", opts...)
	if err != nil {
		return nil, err
	}
	x := &sQLFlowRunClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SQLFlow_RunClient interface {
	Recv() (*RunResponse, error)
	grpc.ClientStream
}

type sQLFlowRunClient struct {
	grpc.ClientStream
}

func (x *sQLFlowRunClient) Recv() (*RunResponse, error) {
	m := new(RunResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SQLFlowServer is the server API for SQLFlow service.
type SQLFlowServer interface {
	// Run runs a SQL statement and returns a stream of RunResponse.
	Run(*RunRequest, SQLFlow_RunServer) error
}

func RegisterSQLFlowServer(s *grpc.Server, srv SQLFlowServer) {
	s.RegisterService(&_SQLFlow_serviceDesc, srv)
}

func _SQLFlow_Run_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RunRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SQLFlowServer).Run(m, &sQLFlowRunServer{stream})
}

type SQLFlow_RunServer interface {
	Send(*RunResponse) error
	grpc.ServerStream
}

type sQLFlowRunServer struct {
	grpc.ServerStream
}

func (x *sQLFlowRunServer) Send(m *RunResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _SQLFlow_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sqlflow.SQLFlow",
	HandlerType: (*SQLFlowServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Run",
			Handler:       _SQLFlow_Run_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sqlflow.proto",
}
