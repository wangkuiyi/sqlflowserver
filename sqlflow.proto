syntax = "proto3";

import "google/protobuf/any.proto";

package sqlflow;

service SQLFlow {
  // Run runs a SQL statement and returns a stream of RunResponse.
  rpc Run (RunRequest) returns (stream RunResponse);
}

// SQL statements to be executed
// e.g.
//      1. `USE database`
//      2. `SELECT ...`
//      3. `SELECT ... TRAIN/PREDICT ...`
message RunRequest {
  string sql = 1;		// The SQL statement to be executed.
}

// SQL statements like `USE database` returns only a success message.
// In such cases, the return stream contains only one RunResponse with
// RunResponse.message set.
//
// SQL statements like `SELECT ...` returns a table in addition
// to the status, and the table might be big.  In such cases, Run returns a
// stream of RunResponse
//
// SQL statement like `SELECT ... TRAIN/PREDICT ...` returns a stream of message
// which indicates the training/predicting progress
//
// Each RunResponse doesn't exceed the maximum message size
// (https://stackoverflow.com/a/34186672/724872).
message RunResponse {
  repeated string message = 1;
  map<string, Column> columns = 2; // only set if RunRequest.sql returns data.
}

// A data column of any type
message Column {
  repeated google.protobuf.Any data = 1;
}
